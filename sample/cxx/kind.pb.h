// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kind.proto

#ifndef PROTOBUF_kind_2eproto__INCLUDED
#define PROTOBUF_kind_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "dependency.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_kind_2eproto();
void protobuf_AssignDesc_kind_2eproto();
void protobuf_ShutdownFile_kind_2eproto();

class role_cfg;
class role_upgrade_cfg;

// ===================================================================

class role_cfg : public ::google::protobuf::MessageLite {
 public:
  role_cfg();
  virtual ~role_cfg();

  role_cfg(const role_cfg& from);

  inline role_cfg& operator=(const role_cfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const role_cfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const role_cfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(role_cfg* other);

  // implements Message ----------------------------------------------

  role_cfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const role_cfg& from);
  void MergeFrom(const role_cfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 unlock_level = 2;
  inline bool has_unlock_level() const;
  inline void clear_unlock_level();
  static const int kUnlockLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 unlock_level() const;
  inline void set_unlock_level(::google::protobuf::uint32 value);

  // required uint32 cost_type = 3;
  inline bool has_cost_type() const;
  inline void clear_cost_type();
  static const int kCostTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 cost_type() const;
  inline void set_cost_type(::google::protobuf::uint32 value);

  // required int32 cost_value = 4;
  inline bool has_cost_value() const;
  inline void clear_cost_value();
  static const int kCostValueFieldNumber = 4;
  inline ::google::protobuf::int32 cost_value() const;
  inline void set_cost_value(::google::protobuf::int32 value);

  // required string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .dep_cfg dep_test = 10;
  inline bool has_dep_test() const;
  inline void clear_dep_test();
  static const int kDepTestFieldNumber = 10;
  inline const ::dep_cfg& dep_test() const;
  inline ::dep_cfg* mutable_dep_test();
  inline ::dep_cfg* release_dep_test();
  inline void set_allocated_dep_test(::dep_cfg* dep_test);

  // repeated string test_array = 11;
  inline int test_array_size() const;
  inline void clear_test_array();
  static const int kTestArrayFieldNumber = 11;
  inline const ::std::string& test_array(int index) const;
  inline ::std::string* mutable_test_array(int index);
  inline void set_test_array(int index, const ::std::string& value);
  inline void set_test_array(int index, const char* value);
  inline void set_test_array(int index, const char* value, size_t size);
  inline ::std::string* add_test_array();
  inline void add_test_array(const ::std::string& value);
  inline void add_test_array(const char* value);
  inline void add_test_array(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& test_array() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_array();

  // @@protoc_insertion_point(class_scope:role_cfg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_unlock_level();
  inline void clear_has_unlock_level();
  inline void set_has_cost_type();
  inline void clear_has_cost_type();
  inline void set_has_cost_value();
  inline void clear_has_cost_value();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_dep_test();
  inline void clear_has_dep_test();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 unlock_level_;
  ::google::protobuf::uint32 cost_type_;
  ::google::protobuf::int32 cost_value_;
  ::std::string* name_;
  ::dep_cfg* dep_test_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_array_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_kind_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_kind_2eproto();
  #endif
  friend void protobuf_AssignDesc_kind_2eproto();
  friend void protobuf_ShutdownFile_kind_2eproto();

  void InitAsDefaultInstance();
  static role_cfg* default_instance_;
};
// -------------------------------------------------------------------

class role_upgrade_cfg : public ::google::protobuf::MessageLite {
 public:
  role_upgrade_cfg();
  virtual ~role_upgrade_cfg();

  role_upgrade_cfg(const role_upgrade_cfg& from);

  inline role_upgrade_cfg& operator=(const role_upgrade_cfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const role_upgrade_cfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const role_upgrade_cfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(role_upgrade_cfg* other);

  // implements Message ----------------------------------------------

  role_upgrade_cfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const role_upgrade_cfg& from);
  void MergeFrom(const role_upgrade_cfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 cost_type = 3;
  inline bool has_cost_type() const;
  inline void clear_cost_type();
  static const int kCostTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 cost_type() const;
  inline void set_cost_type(::google::protobuf::uint32 value);

  // required int32 cost_value = 4;
  inline bool has_cost_value() const;
  inline void clear_cost_value();
  static const int kCostValueFieldNumber = 4;
  inline ::google::protobuf::int32 cost_value() const;
  inline void set_cost_value(::google::protobuf::int32 value);

  // required int32 score_add = 5;
  inline bool has_score_add() const;
  inline void clear_score_add();
  static const int kScoreAddFieldNumber = 5;
  inline ::google::protobuf::int32 score_add() const;
  inline void set_score_add(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:role_upgrade_cfg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_cost_type();
  inline void clear_has_cost_type();
  inline void set_has_cost_value();
  inline void clear_has_cost_value();
  inline void set_has_score_add();
  inline void clear_has_score_add();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 cost_type_;
  ::google::protobuf::int32 cost_value_;
  ::google::protobuf::int32 score_add_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_kind_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_kind_2eproto();
  #endif
  friend void protobuf_AssignDesc_kind_2eproto();
  friend void protobuf_ShutdownFile_kind_2eproto();

  void InitAsDefaultInstance();
  static role_upgrade_cfg* default_instance_;
};
// ===================================================================


// ===================================================================

// role_cfg

// required uint32 id = 1;
inline bool role_cfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_cfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_cfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_cfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 role_cfg::id() const {
  // @@protoc_insertion_point(field_get:role_cfg.id)
  return id_;
}
inline void role_cfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:role_cfg.id)
}

// required uint32 unlock_level = 2;
inline bool role_cfg::has_unlock_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_cfg::set_has_unlock_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_cfg::clear_has_unlock_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_cfg::clear_unlock_level() {
  unlock_level_ = 0u;
  clear_has_unlock_level();
}
inline ::google::protobuf::uint32 role_cfg::unlock_level() const {
  // @@protoc_insertion_point(field_get:role_cfg.unlock_level)
  return unlock_level_;
}
inline void role_cfg::set_unlock_level(::google::protobuf::uint32 value) {
  set_has_unlock_level();
  unlock_level_ = value;
  // @@protoc_insertion_point(field_set:role_cfg.unlock_level)
}

// required uint32 cost_type = 3;
inline bool role_cfg::has_cost_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_cfg::set_has_cost_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_cfg::clear_has_cost_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_cfg::clear_cost_type() {
  cost_type_ = 0u;
  clear_has_cost_type();
}
inline ::google::protobuf::uint32 role_cfg::cost_type() const {
  // @@protoc_insertion_point(field_get:role_cfg.cost_type)
  return cost_type_;
}
inline void role_cfg::set_cost_type(::google::protobuf::uint32 value) {
  set_has_cost_type();
  cost_type_ = value;
  // @@protoc_insertion_point(field_set:role_cfg.cost_type)
}

// required int32 cost_value = 4;
inline bool role_cfg::has_cost_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_cfg::set_has_cost_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_cfg::clear_has_cost_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_cfg::clear_cost_value() {
  cost_value_ = 0;
  clear_has_cost_value();
}
inline ::google::protobuf::int32 role_cfg::cost_value() const {
  // @@protoc_insertion_point(field_get:role_cfg.cost_value)
  return cost_value_;
}
inline void role_cfg::set_cost_value(::google::protobuf::int32 value) {
  set_has_cost_value();
  cost_value_ = value;
  // @@protoc_insertion_point(field_set:role_cfg.cost_value)
}

// required string name = 5;
inline bool role_cfg::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_cfg::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_cfg::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_cfg::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& role_cfg::name() const {
  // @@protoc_insertion_point(field_get:role_cfg.name)
  return *name_;
}
inline void role_cfg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:role_cfg.name)
}
inline void role_cfg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:role_cfg.name)
}
inline void role_cfg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:role_cfg.name)
}
inline ::std::string* role_cfg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:role_cfg.name)
  return name_;
}
inline ::std::string* role_cfg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void role_cfg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:role_cfg.name)
}

// required .dep_cfg dep_test = 10;
inline bool role_cfg::has_dep_test() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_cfg::set_has_dep_test() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_cfg::clear_has_dep_test() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_cfg::clear_dep_test() {
  if (dep_test_ != NULL) dep_test_->::dep_cfg::Clear();
  clear_has_dep_test();
}
inline const ::dep_cfg& role_cfg::dep_test() const {
  // @@protoc_insertion_point(field_get:role_cfg.dep_test)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return dep_test_ != NULL ? *dep_test_ : *default_instance().dep_test_;
#else
  return dep_test_ != NULL ? *dep_test_ : *default_instance_->dep_test_;
#endif
}
inline ::dep_cfg* role_cfg::mutable_dep_test() {
  set_has_dep_test();
  if (dep_test_ == NULL) dep_test_ = new ::dep_cfg;
  // @@protoc_insertion_point(field_mutable:role_cfg.dep_test)
  return dep_test_;
}
inline ::dep_cfg* role_cfg::release_dep_test() {
  clear_has_dep_test();
  ::dep_cfg* temp = dep_test_;
  dep_test_ = NULL;
  return temp;
}
inline void role_cfg::set_allocated_dep_test(::dep_cfg* dep_test) {
  delete dep_test_;
  dep_test_ = dep_test;
  if (dep_test) {
    set_has_dep_test();
  } else {
    clear_has_dep_test();
  }
  // @@protoc_insertion_point(field_set_allocated:role_cfg.dep_test)
}

// repeated string test_array = 11;
inline int role_cfg::test_array_size() const {
  return test_array_.size();
}
inline void role_cfg::clear_test_array() {
  test_array_.Clear();
}
inline const ::std::string& role_cfg::test_array(int index) const {
  // @@protoc_insertion_point(field_get:role_cfg.test_array)
  return test_array_.Get(index);
}
inline ::std::string* role_cfg::mutable_test_array(int index) {
  // @@protoc_insertion_point(field_mutable:role_cfg.test_array)
  return test_array_.Mutable(index);
}
inline void role_cfg::set_test_array(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:role_cfg.test_array)
  test_array_.Mutable(index)->assign(value);
}
inline void role_cfg::set_test_array(int index, const char* value) {
  test_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:role_cfg.test_array)
}
inline void role_cfg::set_test_array(int index, const char* value, size_t size) {
  test_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:role_cfg.test_array)
}
inline ::std::string* role_cfg::add_test_array() {
  return test_array_.Add();
}
inline void role_cfg::add_test_array(const ::std::string& value) {
  test_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:role_cfg.test_array)
}
inline void role_cfg::add_test_array(const char* value) {
  test_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:role_cfg.test_array)
}
inline void role_cfg::add_test_array(const char* value, size_t size) {
  test_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:role_cfg.test_array)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
role_cfg::test_array() const {
  // @@protoc_insertion_point(field_list:role_cfg.test_array)
  return test_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
role_cfg::mutable_test_array() {
  // @@protoc_insertion_point(field_mutable_list:role_cfg.test_array)
  return &test_array_;
}

// -------------------------------------------------------------------

// role_upgrade_cfg

// required uint32 id = 1;
inline bool role_upgrade_cfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_upgrade_cfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_upgrade_cfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_upgrade_cfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 role_upgrade_cfg::id() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.id)
  return id_;
}
inline void role_upgrade_cfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.id)
}

// required uint32 level = 2;
inline bool role_upgrade_cfg::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_upgrade_cfg::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_upgrade_cfg::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_upgrade_cfg::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 role_upgrade_cfg::level() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.level)
  return level_;
}
inline void role_upgrade_cfg::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.level)
}

// required uint32 cost_type = 3;
inline bool role_upgrade_cfg::has_cost_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_upgrade_cfg::set_has_cost_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_upgrade_cfg::clear_has_cost_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_upgrade_cfg::clear_cost_type() {
  cost_type_ = 0u;
  clear_has_cost_type();
}
inline ::google::protobuf::uint32 role_upgrade_cfg::cost_type() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.cost_type)
  return cost_type_;
}
inline void role_upgrade_cfg::set_cost_type(::google::protobuf::uint32 value) {
  set_has_cost_type();
  cost_type_ = value;
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.cost_type)
}

// required int32 cost_value = 4;
inline bool role_upgrade_cfg::has_cost_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_upgrade_cfg::set_has_cost_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_upgrade_cfg::clear_has_cost_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_upgrade_cfg::clear_cost_value() {
  cost_value_ = 0;
  clear_has_cost_value();
}
inline ::google::protobuf::int32 role_upgrade_cfg::cost_value() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.cost_value)
  return cost_value_;
}
inline void role_upgrade_cfg::set_cost_value(::google::protobuf::int32 value) {
  set_has_cost_value();
  cost_value_ = value;
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.cost_value)
}

// required int32 score_add = 5;
inline bool role_upgrade_cfg::has_score_add() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_upgrade_cfg::set_has_score_add() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_upgrade_cfg::clear_has_score_add() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_upgrade_cfg::clear_score_add() {
  score_add_ = 0;
  clear_has_score_add();
}
inline ::google::protobuf::int32 role_upgrade_cfg::score_add() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.score_add)
  return score_add_;
}
inline void role_upgrade_cfg::set_score_add(::google::protobuf::int32 value) {
  set_has_score_add();
  score_add_ = value;
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.score_add)
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_kind_2eproto__INCLUDED
